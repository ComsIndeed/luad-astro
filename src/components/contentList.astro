---
import { createSafeRoute, formatTimeElapsed } from "../lib/randomUtils";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../lib/firebase";
import NotFoundImage from "../Assets/notFound.webp";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import type { LuadDocumentObject } from "../lib/admin/interfaces/adminInterfaces";

const retrievedData = await getDocs(collection(db, "documents"));
const fetchedDocuments = retrievedData.docs;
const cachedDocuments = fetchedDocuments.map((item) => {
  return {
    ...item.data(),
    id: item.id,
  };
});

fetchedDocuments.forEach((item) => {
  const docum: LuadDocumentObject = item.data();
  docum.head?.meta?.category?.includes;
});

const { selectedCategory } = Astro.props;
---

<div class="Contents">
  {
    (selectedCategory === "all" && fetchedDocuments.length == 0) ||
      (selectedCategory != "all" &&
        fetchedDocuments.filter((item) =>
          item.data().head?.meta?.category?.includes(selectedCategory)
        ).length == 0 && <p>Nothing here {":("}</p>)
  }
  <div class="ContentGrid">
    {
      selectedCategory === "all" &&
        fetchedDocuments.length > 0 &&
        fetchedDocuments.map((item) => {
          return (
            <a
              href={`/posts/${createSafeRoute(item.data()?.head?.title)}-${item.id}`}
              class="ContentCard animate__animated animate__fadeIn"
              id={`ContentCard-${item.id}`}
            >
              <Image
                class="ContentCard-thumbnail"
                width={360}
                height={270}
                src={item?.data()?.head?.headerImage.small || NotFoundImage}
                alt={`Thumbnail for the article: "${item?.data()?.head?.title}"`}
              />
              <div class="ContentCard-text">
                <span class="ContentCard-author">
                  <Icon class="ContentCard-author-icon" name="mdi:user" />
                  <p class="ContentCard-author-text">
                    {item?.data()?.head?.author}
                  </p>
                  {item?.data()?.head?.creationDateRaw && (
                    <>
                      <p>
                        {" "}
                        •{" "}
                        {formatTimeElapsed(item?.data()?.head?.creationDateRaw)}
                      </p>
                    </>
                  )}
                </span>
                <h3 class="ContentCard-title"> {item?.data()?.head?.title} </h3>
                <p class="ContentCard-body animate__animated animate__fadeInUp">
                  {item
                    ?.data()
                    ?.body?.replaceAll("#", "")
                    ?.replaceAll("*", "")
                    ?.replaceAll("<br />", " ")
                    ?.substr(0, 194)}
                  ...
                </p>
              </div>

              {/*  */}
            </a>
          );
        })
    }
    {
      selectedCategory != "all" &&
        fetchedDocuments.filter((item) =>
          item.data().head?.meta?.category?.includes(selectedCategory)
        ).length > 0 &&
        fetchedDocuments
          .filter((item) =>
            item.data().head?.meta?.category?.includes(selectedCategory)
          )
          .map((item) => {
            return (
              <a
                href={`/posts/${createSafeRoute(item.data()?.head?.title)}-${item.id}`}
                class="ContentCard animate__animated animate__fadeIn"
              >
                {/*  */}

                <Image
                  class="ContentCard-thumbnail"
                  width={360}
                  height={270}
                  src={item?.data()?.head?.headerImage.small || NotFoundImage}
                  alt={`Thumbnail for the article: "${item?.data()?.head?.title}"`}
                />
                <div class="ContentCard-text">
                  <span class="ContentCard-author">
                    <Icon class="ContentCard-author-icon" name="mdi:user" />
                    <p class="ContentCard-author-text">
                      {item?.data()?.head?.author}
                    </p>
                    {item?.data()?.head?.creationDateRaw && (
                      <>
                        <p>
                          {" "}
                          •{" "}
                          {formatTimeElapsed(
                            item?.data()?.head?.creationDateRaw
                          )}
                        </p>
                      </>
                    )}
                  </span>
                  <h3 class="ContentCard-title">
                    {" "}
                    {item?.data()?.head?.title}{" "}
                  </h3>
                  <p class="ContentCard-body animate__animated animate__fadeInUp">
                    {item
                      ?.data()
                      ?.body?.replaceAll("#", "")
                      ?.replaceAll("*", "")
                      ?.replaceAll("<br />", " ")
                      ?.substr(0, 194)}
                    ...
                  </p>
                </div>

                {/*  */}
              </a>
            );
          })
    }
    <!-- ! BACKEND, KINDA -->
    <div
      id="data-fetchedDocuments"
      data-cached_documents={JSON.stringify(cachedDocuments)}
    >
    </div>
    <script>
      import { createSafeRoute } from "../lib/randomUtils";
      import { sortByMatch } from "../lib/searchLib";
      import { categories } from "../lib/config"
      document.addEventListener("DOMContentLoaded", () => {
        const dataElement = document.getElementById("data-fetchedDocuments")!;
        const data: any[] = JSON.parse(dataElement.dataset.cached_documents!);

        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const searchQuery = urlParams.get("search");

        if (!!searchQuery && searchQuery?.length > 0) {
          document.querySelector(".ContentGrid")!.textContent = "";
          const searchResults = sortByMatch(data, searchQuery);
          // TODO DETERMINE WHY THIS IS NULL
          const ContentCardTemplate = document.getElementById(
            "ContentCard-Template"
          ) as HTMLTemplateElement;

          let categorizedSearchResults;
          const firstPathParameter = window.location.pathname.split("/")[1];
          const isPathACategory = !!categories.includes(firstPathParameter);
          const currentCategory = isPathACategory ? firstPathParameter : "all";

          if (currentCategory != "all") {          
          categorizedSearchResults = searchResults.filter(item => item?.head?.meta?.category.includes(currentCategory));
          } else {
          categorizedSearchResults = searchResults;
          };

          categorizedSearchResults.forEach((documentItem) => {
            const ContentCardTemplateClone =
              ContentCardTemplate.content.cloneNode(true) as HTMLElement;

            if (ContentCardTemplateClone.querySelector(".ContentCard")) {
              ContentCardTemplateClone.querySelector(
                ".ContentCard"
              )?.setAttribute(
                "href",
                `/posts/${createSafeRoute(documentItem.head?.title)}-${documentItem.id}`
              );
            }
            if (
              ContentCardTemplateClone.querySelector(
                ".ContentCard-thumbnail"
              ) &&
              !!documentItem?.head?.headerImage?.small
            ) {
              ContentCardTemplateClone.querySelector(
                ".ContentCard-thumbnail"
              )?.setAttribute("src", documentItem?.head?.headerImage?.small);
            }
            if (
              !!ContentCardTemplateClone.querySelector(
                ".ContentCard-author-text"
              )
            ) {
              ContentCardTemplateClone.querySelector(
                ".ContentCard-author-text"
              )!.textContent = documentItem?.head?.author;
            }
            if (
              !!ContentCardTemplateClone.querySelector(".ContentCard-title")
            ) {
              ContentCardTemplateClone.querySelector(
                ".ContentCard-title"
              )!.textContent = documentItem?.head?.title;
            }
            if (!!ContentCardTemplateClone.querySelector(".ContentCard-body") && !!documentItem?.body) {
              ContentCardTemplateClone.querySelector(
                ".ContentCard-body"
              )!.textContent =
                documentItem?.body
                  .replaceAll("#", "")
                  .replaceAll("*", "")
                  .replaceAll("<br />", "")
                  .substr(0, 194) + "...";
            }

            console.log("BEFORE APPEND");
            document
              .querySelector(".ContentGrid")
              ?.appendChild(ContentCardTemplateClone);
            console.log("AFTER APPEND");
          });
        }
      });
    </script>
  </div>
</div>
